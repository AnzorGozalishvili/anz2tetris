// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Decode instruction
	Not(in=instruction[15], out=isAInstruction);
	And(a=instruction[15], b=true, out=isCInstruction);

	// A Register logic
	Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=aRegisterIn);
	Not(in=instruction[15], out=loadAFromInstruction);
	Or(a=loadAFromInstruction, b=instruction[5], out=loadA);
	ARegister(in=aRegisterIn, load=loadA, out=aRegisterOut, out[0..14]=addressM);

	// D Register logic 
	And(a=instruction[4], b=isCInstruction, out=loadD);
	DRegister(in=aluOutput, load=loadD, out=dRegisterOut);

	// ALU input selection
	Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aluY);

	// ALU control and computation
	ALU(x=dRegisterOut, 
		y=aluY, 
		zx=instruction[11],
		nx=instruction[10], 
		zy=instruction[9],
		ny=instruction[8], 
		f=instruction[7],
		no=instruction[6],
		out=aluOutput,
		out=outM,
		zr=zeroOut,
		ng=negOut);

	// Write to memory control
	And(a=instruction[3], b=isCInstruction, out=writeM);

	// Jump logic
	Not(in=zeroOut, out=notZero);
	Not(in=negOut, out=notNeg);
	And(a=notZero, b=notNeg, out=positive);

	And(a=instruction[2], b=negOut, out=jumpNeg);
	And(a=instruction[1], b=zeroOut, out=jumpZero); 
	And(a=instruction[0], b=positive, out=jumpPos);

	Or(a=jumpNeg, b=jumpZero, out=jumpTemp);
	Or(a=jumpTemp, b=jumpPos, out=jumpConditionMet);
	And(a=jumpConditionMet, b=isCInstruction, out=jump);

	// Program counter
	PC(in=aRegisterOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}