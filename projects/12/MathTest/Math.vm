function Math.init 0
push constant 16
pop static 0
push constant 16
call Array.new 1
pop static 1
push constant 0
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 1
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 1
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 1
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 1
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 1
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 1
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 1
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 1
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 1
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 1
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 1
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 1
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 1
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 1
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_0
push local 2
push static 0
lt
not
if-goto WHILE_1
push argument 1
push local 2
push static 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
if-goto IF_0
goto IF_1
label IF_0
push local 0
push local 1
add
pop local 0
label IF_1
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_0
label WHILE_1
push local 0
return
function Math.divide 2
push argument 1
push constant 0
eq
if-goto IF_3
goto IF_4
label IF_3
push constant 3
call Sys.error 1
pop temp 0
push constant 0
return
label IF_4
push constant 0
pop local 1
push argument 0
push constant 0
lt
if-goto IF_6
goto IF_7
label IF_6
push argument 0
call Math.abs 1
pop argument 0
push local 1
not
pop local 1
label IF_7
push argument 1
push constant 0
lt
if-goto IF_9
goto IF_10
label IF_9
push argument 1
call Math.abs 1
pop argument 1
push local 1
not
pop local 1
label IF_10
push argument 1
push argument 0
gt
if-goto IF_12
goto IF_13
label IF_12
push constant 0
return
label IF_13
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 1
push argument 1
add
push constant 0
lt
if-goto IF_15
goto IF_16
label IF_15
push constant 0
pop local 0
push argument 0
push argument 1
gt
if-goto IF_18
goto IF_19
label IF_18
push constant 1
pop local 0
label IF_19
push local 1
if-goto IF_21
goto IF_22
label IF_21
push local 0
neg
return
label IF_22
push local 0
return
label IF_16
push argument 0
push constant 2
push argument 1
call Math.multiply 2
push local 0
call Math.multiply 2
sub
push argument 1
lt
if-goto IF_24
goto IF_25
label IF_24
push local 0
push local 0
add
pop local 0
goto IF_26
label IF_25
push local 0
push local 0
add
push constant 1
add
pop local 0
label IF_26
push local 1
if-goto IF_27
goto IF_28
label IF_27
push local 0
neg
return
label IF_28
push local 0
return
function Math.sqrt 4
push argument 0
push constant 0
lt
if-goto IF_30
goto IF_31
label IF_30
push constant 4
call Sys.error 1
pop temp 0
label IF_31
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_2
push local 1
push constant 0
lt
not
not
if-goto WHILE_3
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto IF_33
goto IF_34
label IF_33
push local 2
pop local 0
label IF_34
push local 1
push constant 1
sub
pop local 1
goto WHILE_2
label WHILE_3
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_36
goto IF_37
label IF_36
push argument 0
return
label IF_37
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_39
goto IF_40
label IF_39
push argument 0
return
label IF_40
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_42
goto IF_43
label IF_42
push argument 0
neg
return
label IF_43
push argument 0
return
function Math.twoToThe 0
push argument 0
push static 1
add
pop pointer 1
push that 0
return
