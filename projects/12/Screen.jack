// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;  // Screen memory map
    static boolean color; // Current color (true = black, false = white)
    static int screenWidth, screenHeight;
    static int screenSize;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;  // Screen memory starts at 16384
        let color = true;    // Default color is black
        let screenWidth = 512;
        let screenHeight = 256;
        let screenSize = 8192;  // 512 * 256 / 16 words
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < screenSize) {
            do Memory.poke(screen + i, 0);  // Set all bits to 0 (white)
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mask;
        
        // Validate coordinates
        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(7); // Illegal pixel coordinates
        }
        
        let address = screen + (y * 32) + (x / 16);
        let value = Memory.peek(address);
        let mask = Math.twoToThe(x & 15);  // x mod 16
        
        if (color) {
            let value = value | mask;       // Set bit for black
        }
        else {
            let value = value & (~mask);    // Clear bit for white
        }
        
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        var int temp;
        
        // Ensure x1 <= x2
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        
        // Vertical line
        if (dx = 0) {
            if (y1 > y2) {
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }
            while (~(b > (y2 - y1))) {
                do Screen.drawPixel(x1, y1 + b);
                let b = b + 1;
            }
            return;
        }
        
        // Handle negative slope
        if (dy < 0) {
            do Screen.drawLine(x1, y1, x2, y2 + (dy * -1));
            return;
        }
        
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        
        // Validate coordinates
        if ((x1 > x2) | (y1 > y2)) {
            do Sys.error(8); // Illegal rectangle coordinates
        }
        
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        
        // Validate radius
        if ((r < 0) | (r > 181)) {
            do Sys.error(13); // Illegal radius
        }
        
        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
